Create and format disk image file

Method 1:

Get Netboot Images

Choose an archive mirror https://launchpad.net/ubuntu/+archivemirrors.


$ sudo mkdir -p /var/lib/xen/images/ubuntu-netboot/trusty14LTS
$ cd /var/lib/xen/images/ubuntu-netboot/trusty14LTS
$ wget http://<mirror>/ubuntu/dists/trusty/main/installer-amd64/current/images/netboot/xen/vmlinuz
$ wget http://<mirror>/ubuntu/dists/trusty/main/installer-amd64/current/images/netboot/xen/initrd.gz




sudo mkdir -p /var/lib/xen/images
sudo dd if=/dev/zero of=/var/lib/xen/images/xenguest.img bs=1M seek=10240 count=0
sudo mkfs.ext4 -F /var/lib/xen/images/xenguest.img
sudo dd if=/dev/zero of=/var/lib/xen/images/xenguest.swap bs=1M seek=2048 count=0
sudo mkswap /var/lib/xen/images/xenguest.swap


xenguest.cfg
name="xenguest"
kernel = "/var/lib/xen/images/ubuntu-netboot/trusty14LTS/vmlinuz"
ramdisk = "/var/lib/xen/images/ubuntu-netboot/trusty14LTS/initrd.gz"
memory = 4096
vcpus = 4
vif = [ '' ]
disk = ['tap:aio:/var/lib/xen/images/xenguest.img,xvda1,w', 'tap:aio:/var/lib/xen/images/xenguest.swap,xvda2,w']
root = "/dev/xvda1 ro"

xl create -c xenguest.cfg


Method 2:

Lets compile kernel  for new guest domain-

user@dom0# wget http://www.kernel.org/pub/linux/kernel/v3.0/linux-3.7.1.tar.gz
user@dom0# tar xvf linux-3.7.1.tar.gz
user@dom0# cd linux-3.7.1
user@dom0# make menuconfig

Set following parameters

Processor type and features 
        High memory support (64GB)
        PAE (Physical Address Extension) Support - enabled

Processor type and features 
        Allocate 2nd-level pagetables from highmem - disabled

Verify .config file have following parameters set

CONFIG_XEN=y 
CONFIG_PARAVIRT_GUEST=y 
CONFIG_PARAVIRT=y 
CONFIG_XEN_PVHVM=y 
CONFIG_XEN_MAX_DOMAIN_MEMORY=128 
CONFIG_XEN_SAVE_RESTORE=y 
CONFIG_PCI_XEN=y 
CONFIG_XEN_PCIDEV_FRONTEND=y 
CONFIG_XEN_BLKDEV_FRONTEND=y 
CONFIG_XEN_NETDEV_FRONTEND=y 
CONFIG_INPUT_XEN_KBDDEV_FRONTEND=y 
CONFIG_HVC_XEN=y 
CONFIG_XEN_FBDEV_FRONTEND=y 
CONFIG_XEN_DEV_EVTCHN=y 
CONFIG_XEN_XENBUS_FRONTEND=y
Now hit make command for kernel compilation, and it will create vmlinux kernel file.

root@dom0# make


sudo dd if=/dev/zero of=/var/lib/xen/images/xenguest.img bs=1M seek=10240 count=0
sudo mkfs.ext4 -F /var/lib/xen/images/xenguest.img
sudo dd if=/dev/zero of=/var/lib/xen/images/xenguest.swap bs=1M seek=2048 count=0
sudo mkswap /var/lib/xen/images/xenguest.swap

mount -o loop ./xenguest.img /mnt/xenimage/




manually using WiFi

sudo iwconfig wlan0 essid "SFUNET"
sudo dhclient -v wlan0

Debian package
ii  libjaxen-java                         1.1.6-1                             all          Java XPath engine
ii  libptexenc1:amd64                     2015.20160222.37495-1               amd64        TeX Live: pTeX encoding library
ii  libxen-4.6:amd64                      4.6.0-1+nmu2                        amd64        Public libs for Xen
ii  libxenstore3.0:amd64                  4.6.0-1+nmu2                        amd64        Xenstore communications library for Xen
ii  xen-hypervisor-4.3-amd64              4.3.0-3+b1                          amd64        Xen Hypervisor on AMD64
ii  xen-utils-common                      4.6.0-1+nmu2                        all          Xen administrative tools - common files
ii  xenstore-utils                        4.6.0-1+nmu2                        amd64        Xenstore command line utilities for Xen


apt-get install xen-linux-system
Reading package lists... Done
Building dependency tree       
Reading state information... Done
Note, selecting 'xen-linux-system-amd64' instead of 'xen-linux-system'
The following additional packages will be installed:
  firmware-linux-free libxen-4.4 linux-image-3.16.0-4-amd64 xen-hypervisor-4.4-amd64 xen-linux-system-3.16.0-4-amd64 xen-system-amd64 xen-utils-4.4 xen-utils-common xenstore-utils
Suggested packages:
  linux-doc-3.16 debian-kernel-handbook
Recommended packages:
  grub-xen-host
The following NEW packages will be installed:
  firmware-linux-free libxen-4.4 linux-image-3.16.0-4-amd64 xen-hypervisor-4.4-amd64 xen-linux-system-3.16.0-4-amd64 xen-linux-system-amd64 xen-system-amd64 xen-utils-4.4 xen-utils-common xenstore-utils
0 upgraded, 10 newly installed, 0 to remove and 1 not upgraded.
Need to get 36.7 MB of archives.
After this operation, 170 MB of additional disk space will be used.


192.168.1.244 chix @
192.168.1.89  KVM VM root test12345
192.168.1.230 Xen VM root test12345








Grant Table

Xen provides grant tables for memory sharing between domains. Device drviers use grant table mechanisms for data exchange. Each domain has its own grant table which is shared with Xen. Entries in this table are identified by grant references. Grant reference is passed between domains and referes to the shared page that is setup in the grant table at that reference point.  Within the grant table, domains usually setup a shared ring structure that is used to share data effectively between domains.


APIs Used

The frontend driver in the DomU's kernel advertises a malloced page to be shared via a hypervisor function call (“hypercall” or “hcall”), (via the gnttab_grant_foreign_access system call). The hcall notifies the hypervisor that other domains are allowed to access this page. DomU then passes a grant table reference ID to the remote domain it is “granting” access to. In our example code, the access is being granted to Dom0. Once the remote domain is finished, the local domain removes the grant, via the
gnttab_end_foreign_access call.

Network devices, as well as any other device that receives data asynchronously, use a method known as page flipping. When page flipping, a driver in the local domain’s kernel will advertise a page to be transferred, via the gnttab_grant_foreign_transfer call. This call notifies the hypervisor that other domains can receive this page. The local domain then transfers the page to the remote domain and takes a free page (via producer/consumer ring).



DomU Code:

/*

This file is run in the DomU Kernel.

It grants a page with a shared ring structure on it to the Dom0.

The grant reference and Event Channel is passed manually. Should be done via XenStore

or some other out of band mechanism.

Compile the code using

make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules

Run it as follows

insmod xen-eg.ko

Pick up the grant ref and event channel that comes out in /var/log/messages and pass as

insmod parameters in the Dom0 module.

Run the Dom0 program as follows

insmod dom0.ko domid=<domid> gref=<gref>

<domid> is the domainid of DomU as seen in "xm list"

<gref> is grant refefrence when xen.ko is insmod

*/

#include <linux/module.h>

#include <linux/kernel.h>

#include <linux/types.h>

#include <xen/interface/xen.h>

#include <xen/interface/io/ring.h>

#include <xen/grant_table.h>

#include <asm/pgtable.h>

#include <asm/sync_bitops.h>

#include <xen/gnttab.h>

#include <xen/evtchn.h>

#include <asm/uaccess.h>

#include <linux/proc_fs.h>

int page;

struct as_request {

unsigned int id; /* private guest value echoed in resp */

unsigned int status;

unsigned int operation;

};

struct as_response {

unsigned int id; /* copied from request */

unsigned int status;

unsigned int operation; /* copied from request */

};

// The following makes the as_sring, as_back_ring, as_back_ring "types"

DEFINE_RING_TYPES(as, struct as_request, struct as_response);

struct info_t {

struct as_front_ring ring;

grant_ref_t gref;

int irq;

int port;

} info;

#define DOM0_ID 0

// Related the proc fs entries

static struct proc_dir_entry *proc_dir = NULL;

static struct proc_dir_entry *proc_file = NULL;

char proc_data[20];

/*

Send an request via the shared ring to Dom0, following by an INT

*/

int send_request_to_dom0() {

struct as_request *ring_req;

int notify;

static int reqid=9;

/* Write a request into the ring and update the req-prod pointer */

ring_req = RING_GET_REQUEST(&(info.ring), info.ring.req_prod_pvt);

ring_req->id = reqid;

ring_req->operation = reqid;

ring_req->status = reqid;

printk("\nxen:DomU: Fill in IDX-%d, with id=%d, op=%d, st=%d",

info.ring.req_prod_pvt, ring_req->id, ring_req->operation,

ring_req->status);

reqid++;

info.ring.req_prod_pvt += 1;

// Send a reqest to backend followed by an int if needed

RING_PUSH_REQUESTS_AND_CHECK_NOTIFY(&(info.ring), notify);

if (notify) {

printk("\nxen:DomU: Sent a req to Dom0");

notify_remote_via_irq(info.irq);

} else {

printk("\nxen:DomU: No notify req to Dom0");

notify_remote_via_irq(info.irq);

}

printk("...\n");

return 0;

}

ssize_t file_write (struct file *filp, const char __user *buff,

unsigned long len, void *data) {

int value;

printk("\nxen:domU: file_write %lu bytes", len);

if (copy_from_user(&proc_data[0], buff, len))

return -EFAULT;

proc_data[len] = '\x0';

//printk(" ,%s", &proc_data[0]);

value = simple_strtol(proc_data, 0, 10);

switch(value) {

case 1:

send_request_to_dom0();

printk(" ,value = %d", value);

break;

default:

printk(" ,value not recognized !");

}

return len;

}

int file_read (char* page, char**start, off_t off,

int count, int *eof, void *data) {

sprintf(page, "%s", proc_data);

return strlen(page);

}

/*

We create a /proc/demo/file entry. When we write a "1" ino this file once

the module is loaded, the file_write function() above is called and this

sends a requesst on the shared ring to the Dom0. This way we test the

event channel and shared ring routines.

*/

int create_procfs_entry() {

int ret = 0;

proc_dir = proc_mkdir("demo", NULL);

if (!proc_dir) {

printk("\nxen:domU Could not create demo entry in procfs");

ret = -EAGAIN;

return ret;

}

proc_file = create_proc_entry("file", 0600, proc_dir);

if (proc_file) {

proc_file->read_proc = file_read;

proc_file->write_proc = file_write;

proc_file->owner = THIS_MODULE;

} else {

printk("\nxen:domU Could not create /proc/demo/file");

ret = -EAGAIN;

return ret;

}

return ret;

}

/*

Our interrupt handler for event channel that we set up

*/

static irqreturn_t as_int (int irq, void *dev_id) {

struct as_response *ring_resp;

RING_IDX i, rp;

printk("\nxen:DomU: as_int called");

again:

rp = info.ring.sring->rsp_prod;

printk("\nxen:DomU: ring pointers %d to %d", info.ring.rsp_cons, rp);

for(i=info.ring.rsp_cons; i != rp; i++) {

unsigned long id;

// what did we get from Dom0

ring_resp = RING_GET_RESPONSE(&(info.ring), i);

printk("\nxen:DomU: Recvd in IDX-%d, with id=%d, op=%d, st=%d",

i, ring_resp->id, ring_resp->operation, ring_resp->status);

id = ring_resp->id;

switch(ring_resp->operation) {

case 0:

printk("\nxen:DomU: operation:0");

break;

default:

break;

}

}

info.ring.rsp_cons = i;

if (i != info.ring.req_prod_pvt) {

int more_to_do;

RING_FINAL_CHECK_FOR_RESPONSES(&info.ring, more_to_do);

if(more_to_do)

goto again;

} else

info.ring.sring->rsp_event = i+1;

return IRQ_HANDLED;

}

int init_module(void) {

int mfn;

int err;

struct as_sring *sring;

/*

Allocates and returns a pointer to the first byte of a memory area

that is several physically contiguous pages long, and doesn't zero

out the area.

GFP_KERNEL - process may sleep

*/

page = __get_free_pages(GFP_KERNEL, 1);

if (page == 0) {

printk("\nxen:DomU: could not get free page");

return 0;

}

/* Put a shared ring structure on this page */

sring = (struct as_sring*) page;

SHARED_RING_INIT(sring);

/* info.ring is the front_ring structure */

FRONT_RING_INIT(&(info.ring), sring, PAGE_SIZE);

mfn = virt_to_mfn(page);

/*

The following grant table func is in drivers/xen/grant-table.c

For shared pages, used for synchronous data, advertise a page to

be shared via the hypervisor function call gnttab_grant_foreign_access.

This call notifies the hypervisor that other domains are allowed to

access this page.

gnttab_map() has been called earlier to setup gnttable_setup_table

during init phase, with a call to HYPERVISOR_grant_table_op(

GNTTAB_setup_table...) and

"shared" pages have been malloc'ed. This "shared" page is then used

below later during the actual grant of a ref by this DOM.

gnttab_grant_foreign_access()

=> get_free_entries

gnttab_free_head - points to the ref of the head

gnttab_free_count- keeps number of free refs

Get a ref id by calling gnttab_entry(head)

gnttab_list[entry/RPP][entry%RPP]

=> gnttab_grat_foreign_access_ref

=>update_grant_entry

shared[ref].frame/domid/flags are updated

"shared" above is a pointer to struct grant_entry (flags/domid/frame)

*/

info.gref = gnttab_grant_foreign_access(DOM0_ID, mfn, 0);

if (info.gref < 0) {

printk("\nxen: could not grant foreign access");

free_page((unsigned long)page);

return 0;

}

/*

The following strcpy is commented out, but was used initally to test

is the memory page is indeed shared with Dom0, when in Dom0, we do a

sprintf of the same memory location and get the same characters.

*/

// strcpy((char*)page, "aseem sethi");

/*

TBD: Save gref to be sent via Xenstore to dom-0. As of now both the

gref and the event channel port id is sent manually during insmod

in the dom0 module.

*/

printk("\n gref = %d", info.gref);

/* Setup an event channel to Dom0 */

err = bind_listening_port_to_irqhandler(DOM0_ID, as_int, 0,

"xen-eg", &info);

if (err < 0) {

printk("\nxen:DomU failed to setup evtchn !");

gnttab_end_foreign_access(info.gref, 0, page);

return 0;

}

info.irq = err;

info.port = irq_to_evtchn_port(info.irq);

printk(" interupt = %d, local-port = %d", info.irq, info.port);

printk("....\n...");

create_procfs_entry();

return 0;

}

void cleanup_module(void) {

printk("\nCleanup grant ref:");

if (gnttab_query_foreign_access(info.gref) == 0) {

//Remove the grant to the page

printk("\n xen: No one has mapped this frame");

// If 3rd param is non NULL, page has to be freed

gnttab_end_foreign_access(info.gref, 0, page);

// free_pages(page,1);

} else {

printk("\n xen: Someone has mapped this frame");

// Guess, we still free the page, since we are rmmod-ed

gnttab_end_foreign_access(info.gref, 0, page);

}

/* Cleanup proc entry */

remove_proc_entry("file", proc_dir);

remove_proc_entry("demo", NULL);

printk("....\n...");

}

MODULE_LICENSE("GPL");


DOM-0 Code

/*

This is the module in Dom0. Compile it using

make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules

Change the grant_ref below in the code to the one seen in DomU before compilation.

Insmod the module using "insmod dom-.ko gref=<vaue> port=<event channel port>

<value> is taken from the dmesg output in DomU when xen.eg.ko is insmod there.

This will map the page that the DomU has shared with the Dom0.

*/

#include <linux/module.h>

#include <linux/moduleparam.h>

#include <linux/kernel.h>

#include <xen/interface/grant_table.h>

#include <xen/interface/io/blkif.h> // for definition of blkif_sring_t

#include <xen/gnttab.h>

#include <linux/vmalloc.h>

#include <asm-x86/xen/hypervisor.h>

#include <xen/evtchn.h>

struct gnttab_map_grant_ref ops;

struct gnttab_unmap_grant_ref unmap_ops;

struct as_request {

unsigned int id; /* private guest value, echoed in resp */

unsigned int status;

unsigned int operation;

};

struct as_response {

unsigned int id; /* copied from request */

unsigned int status;

unsigned int operation; /* copied from request */

};

typedef struct as_request as_request_t;

typedef struct as_response as_response_t;

// From /include/xen/interface/io/ring.h

// The following makes the as_sring, as_back_ring, as_back_ring "types"

DEFINE_RING_TYPES(as, struct as_request, struct as_response);

struct info_t {

int irq;

int gref;

int remoteDomain;

int evtchn;

struct as_back_ring ring;

} info;

int gref;

int port;

module_param(gref, int, 0644);

module_param(port, int, 0644);

static irqreturn_t as_int (int irq, void *dev_id) {

RING_IDX rc, rp;

as_request_t req;

as_response_t resp;

int more_to_do, notify;

// dev_id is a pointer to the info structure

printk("\nxen:Dom0: as_int called with dev_id %x info=%x",

(unsigned int)dev_id, (unsigned int)&info);

rc = info.ring.req_cons;

rp = info.ring.sring->req_prod;

printk(" rc =%d rp =%d", rc, rp);

while(rc!=rp) {

if(RING_REQUEST_CONS_OVERFLOW(&info.ring, rc))

break;

// what did we get from the frontend at index rc

memcpy(&req, RING_GET_REQUEST(&info.ring, rc), sizeof(req));

resp.id = req.id;

resp.operation = req.operation;

resp.status = req.status+1; // Send back a status +1 of what was recvd

printk("\nxen:Dom0: Recvd at IDX-%d: id=%d, op=%d, status=%d",

rc, req.id, req.operation, req.status);

// update the req-consumer

info.ring.req_cons = ++rc;

barrier();

switch (req.operation) {

case 0:

printk("\nxen:Dom0: req.operation = 0");

break;

default:

printk("\nxen:Dom0: req.operation = %d", req.operation);

break;

}

memcpy(RING_GET_RESPONSE(&info.ring, info.ring.rsp_prod_pvt),

&resp, sizeof(resp));

info.ring.rsp_prod_pvt++;

RING_PUSH_RESPONSES_AND_CHECK_NOTIFY(&info.ring, notify);

if(info.ring.rsp_prod_pvt == info.ring.req_cons) {

RING_FINAL_CHECK_FOR_REQUESTS(&info.ring, more_to_do);

} else if (RING_HAS_UNCONSUMED_REQUESTS(&info.ring)) {

more_to_do = 1;

}

if(notify) {

printk("\nxen:Dom0: Send notify to DomU");

notify_remote_via_irq(info.irq);

}

}

return IRQ_HANDLED;

}

int init_module(void) {

struct vm_struct *v_start;

as_sring_t *sring;

int err;

info.gref = gref;

info.remoteDomain = 1;

info.evtchn = port;

printk("\nxen: dom0: init_module with gref = %d", info.gref);

// The following function reserves a range of kernel address space and

// allocates pagetables to map that range. No actual mappings are created.

v_start = alloc_vm_area(PAGE_SIZE);

if (v_start == 0) {

free_vm_area(v_start);

printk("\nxen: dom0: could not allocate page");

return -EFAULT;

}

/*

ops struct in paramaeres

host_addr, flags, ref

ops struct out parameters

status (zero if OK), handle (used to unmap later), dev_bus_addr

*/

gnttab_set_map_op(&ops, (unsigned long)v_start->addr, GNTMAP_host_map,

info.gref, info.remoteDomain); /* flags, ref, domID */

if (HYPERVISOR_grant_table_op(GNTTABOP_map_grant_ref, &ops, 1)) {

printk("\nxen: dom0: HYPERVISOR map grant ref failed");

return -EFAULT;

}

if (ops.status) {

printk("\nxen: dom0: HYPERVISOR map grant ref failed status = %d",

ops.status);

return -EFAULT;

}

printk("\nxen: dom0: shared_page = %x, handle = %x, status = %x",

(unsigned int)v_start->addr, ops.handle, ops.status);

// Used for unmapping

unmap_ops.host_addr = (unsigned long)(v_start->addr);

unmap_ops.handle = ops.handle;

/*

printk("\nBytes in page ");

for(i=0;i<=10;i++) {

printk("%c", ((char*)(v_start->addr))[i]);

}

*/

sring = (as_sring_t*)v_start->addr;

BACK_RING_INIT(&info.ring, sring, PAGE_SIZE);

/* Seetup an event channel to the frontend */

err = bind_interdomain_evtchn_to_irqhandler(info.remoteDomain,

info.evtchn, as_int, 0, "dom0-backend", &info);

if (err < 0) {

printk("\nxen: dom0: init_module failed binding to evtchn !");

err = HYPERVISOR_grant_table_op(GNTTABOP_unmap_grant_ref,

&unmap_ops, 1);

return -EFAULT;

}

info.irq = err;

printk("\nxen: dom0: end init_module: int = %d", info.irq);

return 0;

}

void cleanup_module(void) {

int ret;

printk("\nxen: dom0: cleanup_module");

// Unmap foreign frames

// ops.handle points to the pages that were initially mapped. Set in the

// __init() function

//ops.host_addr ponts to the heap where the pages were mapped

ret = HYPERVISOR_grant_table_op(GNTTABOP_unmap_grant_ref, &unmap_ops, 1);

if (ret == 0) {

printk(" cleanup_module: unmapped shared frame");

} else {

printk(" cleanup_module: unmapped shared frame failed");

}

printk("...\n");

}

MODULE_LICENSE("GPL");










